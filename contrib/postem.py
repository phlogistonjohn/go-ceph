# Automatically file go-ceph issues for missing functionality.
# Uses JSON for missing C function detection (see contrib/implements)
# with added manual markers in json to cut down on spamminess &
# allow human guided logical groupings.
#
# Copyright: (c) John Mulligan <jmulligan@redhat.com>
# License: CC0 or Public Domain
#


import json
import netrc
import os
import sys
import time

# https://pygithub.readthedocs.io/en/latest/
import github


DEBUG = True
NO_SEND = False


def update_issue(plan, func_item):
    group = func_item.get("group")
    if group:
        label = group
        what = "group"
    else:
        label = func_item["c_name"]
        what = "function"
    cfg = plan.setdefault(label, {})
    cfg["what"] = what
    cfg.setdefault("functions", []).append(func_item["c_name"])


def file_issue(gh, topic, group, value):
    name = group
    if value["what"] == "function":
        name = "function {}".format(name)
    title = f"Missing {topic} API components: {name}"
    body = []
    body.append(f"The {topic} API implements function(s) below but go-ceph does not:")
    for f in value.get("functions", []):
        body.append(f"* {f}")
    body.append("")
    body.append("This issue has been filed to track implementing this missing")
    body.append("functionality in the appropriate package within go-ceph.")
    body.append("Please refer to the Ceph C API for details about the function(s)")
    body.append("in question.")
    body.append("")
    body.append("NOTE: This issue was generated by a script.")
    body.append("If the content is innacurate or wording seems a bit odd")
    body.append("please excuse the script and blame the creator @phlogistonjohn")
    body.append("")
    body.append("")
    body = "\n".join(body)
    if DEBUG:
        print("~~~~")
        print(f"TITLE: {title}")
        print(f"BODY:\n\n{body}")
    if NO_SEND:
        return
    if gh.has_issue_with_title(title):
        print("~ found duplicate title, skipping.")
        return
    gh.post_issue(title, body)


def token_from_netrc(site="github.com"):
    fn = os.path.join(os.environ["HOME"], ".netrc")
    nrc = netrc.netrc(fn)
    return nrc.hosts[site][2]


class GH:
    github = None
    repo_name = None
    _repo = None

    def repo(self):
        if self._repo:
            return self._repo
        self._repo = self.github.get_repo(self.repo_name)
        return self._repo

    def has_issue_with_title(self, title):
        r = self.repo()
        for issue in r.get_issues(state="open"):
            if issue.title.lower() == title.lower():
                return True
        return False

    def post_issue(self, title, body):
        r = self.repo()
        label = r.get_label("enhancement")
        issue = r.create_issue(title=title, body=body, labels=[label],)
        print("~ created issue#{}".format(issue.number))
        time.sleep(5)  # avoid annoying github by slamming the api


def main():
    topic = sys.argv[1]
    plan = {}
    source = json.load(sys.stdin)
    for subsection in source.values():
        for item in subsection["missing"]:
            if item.get("to_issue"):
                update_issue(plan, item)

    gh = GH()
    gh.repo_name = "ceph/go-ceph"
    gh.github = github.Github(token_from_netrc())
    for key, value in plan.items():
        file_issue(gh, topic, key, value)


if __name__ == "__main__":
    main()
